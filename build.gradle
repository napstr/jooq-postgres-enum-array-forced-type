/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */


import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.extras.DockerLivenessContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage

buildscript {
	ext {
		flywayVersion = '6.0.8'
		jooqPluginVersion = '3.0.3'
		jooqVersion = '3.12.3'
		dockerPluginVersion = '5.3.0'
		postgresqlVersion = '42.2.8'
	}
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath "gradle.plugin.org.flywaydb:gradle-plugin-publishing:$flywayVersion"
		classpath "nu.studer:gradle-jooq-plugin:$jooqPluginVersion"
		classpath "org.jooq:jooq-codegen:$jooqVersion"
		classpath "com.bmuschko:gradle-docker-plugin:$dockerPluginVersion"
	}
}

apply plugin: 'org.flywaydb.flyway'
apply plugin: 'nu.studer.jooq'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'java'

configurations {
	flywayMigration
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.jooq:jooq:$jooqVersion"
	implementation "org.jooq:jooq-meta:$jooqVersion"
	implementation "org.jooq:jooq-codegen:$jooqVersion"
	implementation "org.postgresql:postgresql:$postgresqlVersion"
	flywayMigration "org.postgresql:postgresql:$postgresqlVersion"
	jooqRuntime "org.postgresql:postgresql:$postgresqlVersion"
}


// Docker codegen container config

ext {
	codegenDbImageRepo = 'postgres'
	codegenDbImageTag = '12'
	codegenDbImageName = codegenDbImageRepo + ':' + codegenDbImageTag
	codegenDbContainerName = 'codegen-postgres'
	codegenJdbcUrl = "jdbc:postgresql://127.0.0.1:5435/codegen?user=codegen"
}

task pullCodegenDbContainer(type: DockerPullImage) {
	repository.set(codegenDbImageName)
}

task createCodegenDbContainer(type: DockerCreateContainer) {
	dependsOn pullCodegenDbContainer
	targetImageId(codegenDbImageName)
	containerName.set(codegenDbContainerName)
	autoRemove.set(true)
	portBindings.set(['127.0.0.1:5435:5432'])
	withEnvVar('POSTGRES_USER', 'codegen')
	withEnvVar('POSTGRES_DB', 'codegen')
}

task stopCodegenDbContainer(type: StopCodegenDbContainer) {
	targetContainerId codegenDbContainerName
}

task startCodegenDbContainer(type: DockerStartContainer) {
	createCodegenDbContainer.mustRunAfter stopCodegenDbContainer
	dependsOn(stopCodegenDbContainer, createCodegenDbContainer)
	targetContainerId codegenDbContainerName
}

task awaitCodegenDbContainer(type: DockerLivenessContainer) {
	targetContainerId codegenDbContainerName
	dependsOn startCodegenDbContainer
	livenessProbe(60000, 3000, 'database system is ready to accept connections')
}


// Flyway config

flyway {
	flywayMigrate {
		dependsOn awaitCodegenDbContainer
	}
	url = "$codegenJdbcUrl"
	locations = ['filesystem:src/main/resources/db/migrations']
	configurations = ['flywayMigration']
}


// Jooq config

jooq {
	version = jooqVersion
	edition = 'OSS'
	example(sourceSets.main) {
		jdbc {
			driver = 'org.postgresql.Driver'
			url = "$codegenJdbcUrl"
		}
		generator {
			name = 'org.jooq.codegen.DefaultGenerator'
			strategy {
				name = 'org.jooq.codegen.DefaultGeneratorStrategy'
			}
			database {
				name = 'org.jooq.meta.postgres.PostgresDatabase'
				inputSchema = 'public'
				forcedTypes {
					forcedType {
						userType = 'org.example.db.type.ExampleEnum'
						enumConverter = true
						includeExpression = '.*'
						includeTypes = 'ExampleEnum'
					}
				}
			}
			target {
				packageName = 'org.example.db.generated'
				directory = 'build/classes/generated/java'
			}
		}
	}
}

generateExampleJooqSchemaSource {
	dependsOn(flywayMigrate)
	doLast {
		stopCodegenDbContainer.start()
	}
}
